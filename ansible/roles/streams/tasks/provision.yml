- name: Evaluate Operator Group DC - A
  k8s:
    host: "{{ dc_a_server }}"
    api_key: "{{ dc_a_token }}"
    validate_certs: false
    state: present
    api_version: operators.coreos.com/v1
    kind: OperatorGroup
    definition:
      metadata:
        name: '{{ dc_a_namespace }}-operatorgroup'
        namespace: '{{ dc_a_namespace}}'
      spec:
        targetNamespaces:
        - '{{ dc_a_namespace }}'

- name: Evaluate AMQ Streams Operator DC - A
  k8s:
    host: "{{ dc_a_server }}"
    api_key: "{{ dc_a_token }}"
    validate_certs: false
    state: present
    kind: Subscription
    api_version: operators.coreos.com/v1alpha1
    definition:
      metadata:
        name: amq-streams
        namespace: '{{ dc_a_namespace }}'
      spec:
        channel: stable
        installPlanApproval: Automatic
        name: amq-streams
        source: redhat-operators
        sourceNamespace: openshift-marketplace
        startingCSV: amqstreams.v2.2.0-3

- name: Evaluate Operator Group - DC B
  k8s:
    host: "{{ dc_b_server }}"
    api_key: "{{ dc_b_token }}"
    validate_certs: false
    state: present
    api_version: operators.coreos.com/v1
    kind: OperatorGroup
    definition:
      metadata:
        name: '{{ dc_b_namespace }}-operatorgroup'
        namespace: '{{ dc_b_namespace}}'
      spec:
        targetNamespaces:
        - '{{ dc_b_namespace }}'

- name: Evaluate AMQ Streams Operator DC - B
  k8s:
    host: "{{ dc_b_server }}"
    api_key: "{{ dc_b_token }}"
    validate_certs: false
    state: present
    kind: Subscription
    api_version: operators.coreos.com/v1alpha1
    definition:
      metadata:
        name: amq-streams
        namespace: '{{ dc_b_namespace }}'
      spec:
        channel: stable
        installPlanApproval: Automatic
        name: amq-streams
        source: redhat-operators
        sourceNamespace: openshift-marketplace
        startingCSV: amqstreams.v2.2.0-3

# - name: Waiting for AMQ Streams operator to install
#   shell: set -o pipefail && oc get csv -n {{ dc_a_namespace }} | grep amqstreams
#   register: install_status
#   until: "'Succeeded' in install_status.stdout"
#   retries: 20
#   delay: 15
#   args:
#     executable: /bin/bash

# - name: Evaluate Cluster ConfigMap - DC A
#   k8s:
#     host: "{{ dc_a_server }}"
#     api_key: "{{ dc_a_token }}"
#     validate_certs: false
#     state: present
#     namespace: '{{ dc_a_namespace }}'
#     resource_definition: "{{ lookup('file', 'metrics-cm.yml') }}"

# - name: Evaluate Cluster ConfigMap - DC B
#   k8s:
#     api_key: "{{ dc_b_token }}"
#     host: "{{ dc_b_server }}"
#     validate_certs: false
#     state: present
#     namespace: '{{ dc_b_namespace }}'
#     resource_definition: "{{ lookup('file', 'metrics-cm.yml') }}"


# - name: Evaluate Cluster Kafka Instance in DC A
#   k8s:
#     host: "{{ dc_a_server }}"
#     api_key: "{{ dc_a_token }}"
#     validate_certs: false
#     state: present
#     namespace: '{{ dc_a_namespace }}'
#     resource_definition: "{{ lookup('template', 'kafka-cluster-a.yml.j2') }}"

# - name: Evaluate Cluster Kafka Instance in DC B
#   k8s:
#     api_key: "{{ dc_b_token }}"
#     host: "{{ dc_b_server }}"
#     validate_certs: false
#     state: present
#     namespace: '{{ dc_b_namespace }}'
#     resource_definition: "{{ lookup('template', 'kafka-cluster-b.yml.j2') }}"


# - name: Login DC A as super user with token on OpenShift 4
#   command: "oc login --token={{ dc_a_token }}  --server={{ dc_a_server }} --insecure-skip-tls-verify={{ insecure_skip_tls_verify }}"
#   ignore_errors: false

# - name: Waiting for Kafka cluster in DC A to be ready
#   shell: set -o pipefail && oc get kafka -n {{ dc_a_namespace }} --server={{ dc_a_server }} | grep {{ dc_a_kafka_cluster }}
#   register: install_status
#   until: "'True' in install_status.stdout"
#   retries: 20
#   delay: 15
#   args:
#     executable: /bin/bash

# - name: Login DC B as super user with token on OpenShift 4
#   command: "oc login --token={{ dc_b_token }}  --server={{ dc_b_server }} --insecure-skip-tls-verify={{ insecure_skip_tls_verify }}"
#   ignore_errors: false

# - name: Waiting for Kafka cluster in DC B to be ready
#   shell: set -o pipefail && oc get kafka -n {{ dc_b_namespace }} --server={{ dc_b_server }} | grep {{ dc_b_kafka_cluster }}
#   register: install_status
#   until: "'True' in install_status.stdout"
#   retries: 20
#   delay: 15
#   args:
#     executable: /bin/bash

# - name: Evaluate events Topic in DC A
#   k8s:
#     host: "{{ dc_a_server }}"
#     api_key: "{{ dc_a_token }}"
#     validate_certs: false
#     state: present
#     namespace: '{{ dc_a_namespace }}'
#     resource_definition: "{{ lookup('template', 'events-topic.yml.j2') }}"

# - name: Install Kafka UI in DC A
#   k8s:
#     host: "{{ dc_a_server }}"
#     api_key: "{{ dc_a_token }}"
#     validate_certs: false
#     state: present
#     namespace: '{{ dc_a_namespace }}'
#     resource_definition: "{{ lookup('template', 'kafka-ui-cluster-a.yml.j2') }}"

# - name: Install Kafka UI in DC B
#   k8s:
#     api_key: "{{ dc_b_token }}"
#     host: "{{ dc_b_server }}"
#     validate_certs: false
#     state: present
#     namespace: '{{ dc_b_namespace }}'
#     resource_definition: "{{ lookup('template', 'kafka-ui-cluster-b.yml.j2') }}"

# - name: Create topic events in Kafka DC A
#   k8s:
#     host: "{{ dc_a_server }}"
#     api_key: "{{ dc_a_token }}"
#     validate_certs: false
#     state: present
#     namespace: '{{ dc_a_namespace }}'
#     resource_definition: "{{ lookup('template', 'events-topic.yml.j2') }}"

# - name: Evaluate Mirror Maker in Kafka DC B
#   k8s:
#     api_key: "{{ dc_b_token }}"
#     host: "{{ dc_b_server }}"
#     validate_certs: false
#     state: present
#     namespace: '{{ dc_b_namespace }}'
#     resource_definition: "{{ lookup('template', 'mirror-maker.yml.j2') }}"

# - name: Install Producer in DC A
#   k8s:
#     host: "{{ dc_a_server }}"
#     api_key: "{{ dc_a_token }}"
#     validate_certs: false
#     state: present
#     namespace: '{{ dc_a_namespace }}'
#     resource_definition: "{{ lookup('template', 'producer.yml.j2') }}"

# - name: Install Consumer in DC A
#   k8s:
#     host: "{{ dc_a_server }}"
#     api_key: "{{ dc_a_token }}"
#     validate_certs: false
#     state: present
#     namespace: '{{ dc_a_namespace }}'
#     resource_definition: "{{ lookup('template', 'consumer-dc-a.yml.j2') }}"

# - name: Install Consumer in DC B
#   k8s:
#     api_key: "{{ dc_b_token }}"
#     host: "{{ dc_b_server }}"
#     validate_certs: false
#     state: present
#     namespace: '{{ dc_b_namespace }}'
#     resource_definition: "{{ lookup('template', 'consumer-dc-b.yml.j2') }}"
